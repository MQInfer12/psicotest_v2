/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PublicImport } from './routes/_public'
import { Route as PrivateImport } from './routes/_private'
import { Route as PublicIndexImport } from './routes/_public/index'
import { Route as PrivateUsersImport } from './routes/_private/users'
import { Route as PrivateChatImport } from './routes/_private/chat'
import { Route as PrivateCalendarImport } from './routes/_private/calendar'
import { Route as PrivateTestsIndexImport } from './routes/_private/tests/index'
import { Route as PrivateTemplatesIndexImport } from './routes/_private/templates/index'
import { Route as PrivateResolveIndexImport } from './routes/_private/resolve/index'
import { Route as PrivateAnswersIndexImport } from './routes/_private/answers/index'
import { Route as PrivateTestsShareImport } from './routes/_private/tests/share'
import { Route as PrivateTestsIdTestImport } from './routes/_private/tests/$idTest'
import { Route as PrivateResolveIdRespuestaImport } from './routes/_private/resolve/$idRespuesta'
import { Route as PrivateFolderIdImport } from './routes/_private/folder/$id'
import { Route as PrivateAnswersIdImport } from './routes/_private/answers/$id'

// Create/Update Routes

const PublicRoute = PublicImport.update({
  id: '/_public',
  getParentRoute: () => rootRoute,
} as any)

const PrivateRoute = PrivateImport.update({
  id: '/_private',
  getParentRoute: () => rootRoute,
} as any)

const PublicIndexRoute = PublicIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PublicRoute,
} as any)

const PrivateUsersRoute = PrivateUsersImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => PrivateRoute,
} as any)

const PrivateChatRoute = PrivateChatImport.update({
  id: '/chat',
  path: '/chat',
  getParentRoute: () => PrivateRoute,
} as any)

const PrivateCalendarRoute = PrivateCalendarImport.update({
  id: '/calendar',
  path: '/calendar',
  getParentRoute: () => PrivateRoute,
} as any)

const PrivateTestsIndexRoute = PrivateTestsIndexImport.update({
  id: '/tests/',
  path: '/tests/',
  getParentRoute: () => PrivateRoute,
} as any)

const PrivateTemplatesIndexRoute = PrivateTemplatesIndexImport.update({
  id: '/templates/',
  path: '/templates/',
  getParentRoute: () => PrivateRoute,
} as any)

const PrivateResolveIndexRoute = PrivateResolveIndexImport.update({
  id: '/resolve/',
  path: '/resolve/',
  getParentRoute: () => PrivateRoute,
} as any)

const PrivateAnswersIndexRoute = PrivateAnswersIndexImport.update({
  id: '/answers/',
  path: '/answers/',
  getParentRoute: () => PrivateRoute,
} as any)

const PrivateTestsShareRoute = PrivateTestsShareImport.update({
  id: '/tests/share',
  path: '/tests/share',
  getParentRoute: () => PrivateRoute,
} as any)

const PrivateTestsIdTestRoute = PrivateTestsIdTestImport.update({
  id: '/tests/$idTest',
  path: '/tests/$idTest',
  getParentRoute: () => PrivateRoute,
} as any)

const PrivateResolveIdRespuestaRoute = PrivateResolveIdRespuestaImport.update({
  id: '/resolve/$idRespuesta',
  path: '/resolve/$idRespuesta',
  getParentRoute: () => PrivateRoute,
} as any)

const PrivateFolderIdRoute = PrivateFolderIdImport.update({
  id: '/folder/$id',
  path: '/folder/$id',
  getParentRoute: () => PrivateRoute,
} as any)

const PrivateAnswersIdRoute = PrivateAnswersIdImport.update({
  id: '/answers/$id',
  path: '/answers/$id',
  getParentRoute: () => PrivateRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_private': {
      id: '/_private'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PrivateImport
      parentRoute: typeof rootRoute
    }
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicImport
      parentRoute: typeof rootRoute
    }
    '/_private/calendar': {
      id: '/_private/calendar'
      path: '/calendar'
      fullPath: '/calendar'
      preLoaderRoute: typeof PrivateCalendarImport
      parentRoute: typeof PrivateImport
    }
    '/_private/chat': {
      id: '/_private/chat'
      path: '/chat'
      fullPath: '/chat'
      preLoaderRoute: typeof PrivateChatImport
      parentRoute: typeof PrivateImport
    }
    '/_private/users': {
      id: '/_private/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof PrivateUsersImport
      parentRoute: typeof PrivateImport
    }
    '/_public/': {
      id: '/_public/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof PublicIndexImport
      parentRoute: typeof PublicImport
    }
    '/_private/answers/$id': {
      id: '/_private/answers/$id'
      path: '/answers/$id'
      fullPath: '/answers/$id'
      preLoaderRoute: typeof PrivateAnswersIdImport
      parentRoute: typeof PrivateImport
    }
    '/_private/folder/$id': {
      id: '/_private/folder/$id'
      path: '/folder/$id'
      fullPath: '/folder/$id'
      preLoaderRoute: typeof PrivateFolderIdImport
      parentRoute: typeof PrivateImport
    }
    '/_private/resolve/$idRespuesta': {
      id: '/_private/resolve/$idRespuesta'
      path: '/resolve/$idRespuesta'
      fullPath: '/resolve/$idRespuesta'
      preLoaderRoute: typeof PrivateResolveIdRespuestaImport
      parentRoute: typeof PrivateImport
    }
    '/_private/tests/$idTest': {
      id: '/_private/tests/$idTest'
      path: '/tests/$idTest'
      fullPath: '/tests/$idTest'
      preLoaderRoute: typeof PrivateTestsIdTestImport
      parentRoute: typeof PrivateImport
    }
    '/_private/tests/share': {
      id: '/_private/tests/share'
      path: '/tests/share'
      fullPath: '/tests/share'
      preLoaderRoute: typeof PrivateTestsShareImport
      parentRoute: typeof PrivateImport
    }
    '/_private/answers/': {
      id: '/_private/answers/'
      path: '/answers'
      fullPath: '/answers'
      preLoaderRoute: typeof PrivateAnswersIndexImport
      parentRoute: typeof PrivateImport
    }
    '/_private/resolve/': {
      id: '/_private/resolve/'
      path: '/resolve'
      fullPath: '/resolve'
      preLoaderRoute: typeof PrivateResolveIndexImport
      parentRoute: typeof PrivateImport
    }
    '/_private/templates/': {
      id: '/_private/templates/'
      path: '/templates'
      fullPath: '/templates'
      preLoaderRoute: typeof PrivateTemplatesIndexImport
      parentRoute: typeof PrivateImport
    }
    '/_private/tests/': {
      id: '/_private/tests/'
      path: '/tests'
      fullPath: '/tests'
      preLoaderRoute: typeof PrivateTestsIndexImport
      parentRoute: typeof PrivateImport
    }
  }
}

// Create and export the route tree

interface PrivateRouteChildren {
  PrivateCalendarRoute: typeof PrivateCalendarRoute
  PrivateChatRoute: typeof PrivateChatRoute
  PrivateUsersRoute: typeof PrivateUsersRoute
  PrivateAnswersIdRoute: typeof PrivateAnswersIdRoute
  PrivateFolderIdRoute: typeof PrivateFolderIdRoute
  PrivateResolveIdRespuestaRoute: typeof PrivateResolveIdRespuestaRoute
  PrivateTestsIdTestRoute: typeof PrivateTestsIdTestRoute
  PrivateTestsShareRoute: typeof PrivateTestsShareRoute
  PrivateAnswersIndexRoute: typeof PrivateAnswersIndexRoute
  PrivateResolveIndexRoute: typeof PrivateResolveIndexRoute
  PrivateTemplatesIndexRoute: typeof PrivateTemplatesIndexRoute
  PrivateTestsIndexRoute: typeof PrivateTestsIndexRoute
}

const PrivateRouteChildren: PrivateRouteChildren = {
  PrivateCalendarRoute: PrivateCalendarRoute,
  PrivateChatRoute: PrivateChatRoute,
  PrivateUsersRoute: PrivateUsersRoute,
  PrivateAnswersIdRoute: PrivateAnswersIdRoute,
  PrivateFolderIdRoute: PrivateFolderIdRoute,
  PrivateResolveIdRespuestaRoute: PrivateResolveIdRespuestaRoute,
  PrivateTestsIdTestRoute: PrivateTestsIdTestRoute,
  PrivateTestsShareRoute: PrivateTestsShareRoute,
  PrivateAnswersIndexRoute: PrivateAnswersIndexRoute,
  PrivateResolveIndexRoute: PrivateResolveIndexRoute,
  PrivateTemplatesIndexRoute: PrivateTemplatesIndexRoute,
  PrivateTestsIndexRoute: PrivateTestsIndexRoute,
}

const PrivateRouteWithChildren =
  PrivateRoute._addFileChildren(PrivateRouteChildren)

interface PublicRouteChildren {
  PublicIndexRoute: typeof PublicIndexRoute
}

const PublicRouteChildren: PublicRouteChildren = {
  PublicIndexRoute: PublicIndexRoute,
}

const PublicRouteWithChildren =
  PublicRoute._addFileChildren(PublicRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof PublicRouteWithChildren
  '/calendar': typeof PrivateCalendarRoute
  '/chat': typeof PrivateChatRoute
  '/users': typeof PrivateUsersRoute
  '/': typeof PublicIndexRoute
  '/answers/$id': typeof PrivateAnswersIdRoute
  '/folder/$id': typeof PrivateFolderIdRoute
  '/resolve/$idRespuesta': typeof PrivateResolveIdRespuestaRoute
  '/tests/$idTest': typeof PrivateTestsIdTestRoute
  '/tests/share': typeof PrivateTestsShareRoute
  '/answers': typeof PrivateAnswersIndexRoute
  '/resolve': typeof PrivateResolveIndexRoute
  '/templates': typeof PrivateTemplatesIndexRoute
  '/tests': typeof PrivateTestsIndexRoute
}

export interface FileRoutesByTo {
  '': typeof PrivateRouteWithChildren
  '/calendar': typeof PrivateCalendarRoute
  '/chat': typeof PrivateChatRoute
  '/users': typeof PrivateUsersRoute
  '/': typeof PublicIndexRoute
  '/answers/$id': typeof PrivateAnswersIdRoute
  '/folder/$id': typeof PrivateFolderIdRoute
  '/resolve/$idRespuesta': typeof PrivateResolveIdRespuestaRoute
  '/tests/$idTest': typeof PrivateTestsIdTestRoute
  '/tests/share': typeof PrivateTestsShareRoute
  '/answers': typeof PrivateAnswersIndexRoute
  '/resolve': typeof PrivateResolveIndexRoute
  '/templates': typeof PrivateTemplatesIndexRoute
  '/tests': typeof PrivateTestsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_private': typeof PrivateRouteWithChildren
  '/_public': typeof PublicRouteWithChildren
  '/_private/calendar': typeof PrivateCalendarRoute
  '/_private/chat': typeof PrivateChatRoute
  '/_private/users': typeof PrivateUsersRoute
  '/_public/': typeof PublicIndexRoute
  '/_private/answers/$id': typeof PrivateAnswersIdRoute
  '/_private/folder/$id': typeof PrivateFolderIdRoute
  '/_private/resolve/$idRespuesta': typeof PrivateResolveIdRespuestaRoute
  '/_private/tests/$idTest': typeof PrivateTestsIdTestRoute
  '/_private/tests/share': typeof PrivateTestsShareRoute
  '/_private/answers/': typeof PrivateAnswersIndexRoute
  '/_private/resolve/': typeof PrivateResolveIndexRoute
  '/_private/templates/': typeof PrivateTemplatesIndexRoute
  '/_private/tests/': typeof PrivateTestsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/calendar'
    | '/chat'
    | '/users'
    | '/'
    | '/answers/$id'
    | '/folder/$id'
    | '/resolve/$idRespuesta'
    | '/tests/$idTest'
    | '/tests/share'
    | '/answers'
    | '/resolve'
    | '/templates'
    | '/tests'
  fileRoutesByTo: FileRoutesByTo
  to:
    | ''
    | '/calendar'
    | '/chat'
    | '/users'
    | '/'
    | '/answers/$id'
    | '/folder/$id'
    | '/resolve/$idRespuesta'
    | '/tests/$idTest'
    | '/tests/share'
    | '/answers'
    | '/resolve'
    | '/templates'
    | '/tests'
  id:
    | '__root__'
    | '/_private'
    | '/_public'
    | '/_private/calendar'
    | '/_private/chat'
    | '/_private/users'
    | '/_public/'
    | '/_private/answers/$id'
    | '/_private/folder/$id'
    | '/_private/resolve/$idRespuesta'
    | '/_private/tests/$idTest'
    | '/_private/tests/share'
    | '/_private/answers/'
    | '/_private/resolve/'
    | '/_private/templates/'
    | '/_private/tests/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  PrivateRoute: typeof PrivateRouteWithChildren
  PublicRoute: typeof PublicRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  PrivateRoute: PrivateRouteWithChildren,
  PublicRoute: PublicRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_private",
        "/_public"
      ]
    },
    "/_private": {
      "filePath": "_private.tsx",
      "children": [
        "/_private/calendar",
        "/_private/chat",
        "/_private/users",
        "/_private/answers/$id",
        "/_private/folder/$id",
        "/_private/resolve/$idRespuesta",
        "/_private/tests/$idTest",
        "/_private/tests/share",
        "/_private/answers/",
        "/_private/resolve/",
        "/_private/templates/",
        "/_private/tests/"
      ]
    },
    "/_public": {
      "filePath": "_public.tsx",
      "children": [
        "/_public/"
      ]
    },
    "/_private/calendar": {
      "filePath": "_private/calendar.tsx",
      "parent": "/_private"
    },
    "/_private/chat": {
      "filePath": "_private/chat.tsx",
      "parent": "/_private"
    },
    "/_private/users": {
      "filePath": "_private/users.tsx",
      "parent": "/_private"
    },
    "/_public/": {
      "filePath": "_public/index.tsx",
      "parent": "/_public"
    },
    "/_private/answers/$id": {
      "filePath": "_private/answers/$id.tsx",
      "parent": "/_private"
    },
    "/_private/folder/$id": {
      "filePath": "_private/folder/$id.tsx",
      "parent": "/_private"
    },
    "/_private/resolve/$idRespuesta": {
      "filePath": "_private/resolve/$idRespuesta.tsx",
      "parent": "/_private"
    },
    "/_private/tests/$idTest": {
      "filePath": "_private/tests/$idTest.tsx",
      "parent": "/_private"
    },
    "/_private/tests/share": {
      "filePath": "_private/tests/share.tsx",
      "parent": "/_private"
    },
    "/_private/answers/": {
      "filePath": "_private/answers/index.tsx",
      "parent": "/_private"
    },
    "/_private/resolve/": {
      "filePath": "_private/resolve/index.tsx",
      "parent": "/_private"
    },
    "/_private/templates/": {
      "filePath": "_private/templates/index.tsx",
      "parent": "/_private"
    },
    "/_private/tests/": {
      "filePath": "_private/tests/index.tsx",
      "parent": "/_private"
    }
  }
}
ROUTE_MANIFEST_END */
